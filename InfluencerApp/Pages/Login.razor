@page "/login"
@using InfluencerApp.Model.Login;
@using InfluencerApp.Model.Master;
@using InfluencerApp.Services;
@using Newtonsoft.Json;
@using System.IdentityModel.Tokens.Jwt;
@inject NavigationManager Navigation
@inject ILoginService LoginService;
@inject IAppService AppService;

@using System
@using System.IO
@using Microsoft.AspNetCore.Hosting

<div class="header-space"></div>

<section>
    <!-- Tabs navs -->
    <ul class="nav nav-tabs nav-fill mb-3" id="ex-2" role="tablist">
        <li class="nav-item" role="presentation">
            <a class="nav-link bg-light text-muted active"
               id="ex-2-tab-1"
               data-mdb-toggle="pill"
               href="#ex-2-tabs-1"
               role="tab"
               aria-controls="pills-1"
               aria-selected="true">Log In</a>
        </li>
        <li class="nav-item" role="presentation">
            <a class="nav-link bg-light text-muted"
               id="ex-2-tab-2"
               data-mdb-toggle="pill"
               href="#ex-2-tabs-2"
               role="tab"
               aria-controls="pills-2"
               aria-selected="false">Register</a>
        </li>
    </ul>
    <!-- Tabs navs -->
    <!-- Tabs content-->
    <div class="tab-content" id="ex-2-content">
        <div class="tab-pane fade show active"
             id="ex-2-tabs-1"
             role="tabpanel"
             aria-labelledby="pills-1-tab">
            
            <EditForm Model="@_LoginModel" OnValidSubmit="logIn">
                <DataAnnotationsValidator />

                <div class="container">

                    <section class="d-flex justify-content-center p-3">
                        <div class="input-group form-outline form-white">
                            <i class="mi mi-Mail trailing text-muted"></i>
                            <input type="email" id="formWhite"
                            @bind-value="_LoginModel.Email" class="form-control"
                                   aria-describedby="basic-addon" />
                            <label class="form-label text-muted" for="formWhite">Email Address</label>
                            <ValidationMessage For="@(()=>_LoginModel.Email)" />
                        </div>
                    </section>

                    <section class="d-flex justify-content-center p-3">
                        <div class="input-group form-outline form-white">
                            <input type="password" id="formWhite"
                            @bind-value="_LoginModel.Password" class="form-control"
                                   aria-describedby="basic-addon" />
                            <label class="form-label text-muted" for="formWhite">Password</label>
                            <ValidationMessage For="@(()=>_LoginModel.Password)" />
                        </div>
                    </section>

                    <div class="d-flex flex-row mt-2 justify-content-center align-items-center">
                        <button type="submit" data-mdb-ripple-color="dark" class="btn btn-light mb-2 mx-2 mi-lg">
                            <i class="mi mi-MyNetwork"></i> Login
                            <span class="@_spinnerClass" role="status" aria-hidden="true"></span>
                        </button>
                    </div>
                </div>
            </EditForm>


        </div>
        <div class="tab-pane fade" id="ex-2-tabs-2" role="tabpanel" aria-labelledby="pills-2-tab">

            <EditForm Model="@_RegisterModel" OnValidSubmit="register">
                <DataAnnotationsValidator />

                <div class="container">

                    <div class="w-100 bg-light"
                         style="
                        height: 10rem;
                        border-top-left-radius: 2px;
                        border-top-right-radius: 2px;
                    "></div>
                    <div class="d-flex justify-content-center" style="margin-top: -5.5rem;">
                        <img class="img-fluid rounded-circle" style="width: 10rem; height: 10rem;"
                             src="@_RegisterModel.ImagePath"
                             alt="Card image" />
                    </div>

                    <section class="d-flex justify-content-center p-3">
                        <div class="container form-group">
                            <label class="form-label text-muted" for="formWhite">Picture</label>
                            <div class="input-group form-outline form-white">
                                <i class="mi mi-Search trailing"></i>

                                <InputFile OnChange="@LoadFiles" accept=".jpg,.jpeg,.png" id="formWhite" class="form-control"
                                           aria-describedby="basic-addon" />

                                @* <input type="file" id="formWhite" accept=".jpg,.jpeg,.png" OnChange="@LoadFiles"
                                @bind-value="_RegisterModel.ImagePath" class="form-control"
                                aria-describedby="basic-addon" />*@
                                <ValidationMessage For="@(()=>_RegisterModel.ImagePath)" />
                            </div>
                        </div>
                    </section>



@*                    <h3>Upload Files</h3>

                    <p>
                        <label>
                            Max file size:
                            <input type="number" @bind="maxFileSize" />
                        </label>
                    </p>

                    <p>
                        <label>
                            Max allowed files:
                            <input type="number" @bind="maxAllowedFiles" />
                        </label>
                    </p>

                    <p>
                        <label>
                            Upload up to @maxAllowedFiles of up to @maxFileSize bytes:
                            <InputFile OnChange="@LoadFiles" multiple accept=".jpg,.jpeg,.png" />
                        </label>
                    </p>

                    @if (isLoading)
                    {
                        <p>Uploading...</p>
                    }
                    else
                    {
                        <ul>
                            @foreach (var file in loadedFiles)
                            {
                                <li>
                                    <ul>
                                        <li>Name: @file.Name</li>
                                        <li>Last modified: @file.LastModified.ToString()</li>
                                        <li>Size (bytes): @file.Size</li>
                                        <li>Content type: @file.ContentType</li>
                                        <li>Extension: @extensionname</li>
                                        <li style="display:@isdisplayimage">
                                            <img alt="" src="@base64data" style="height:100px;width:100px;" />
                                        </li>
                                    </ul>
                                </li>
                            }
                        </ul>
                    }*@



                    <section class="d-flex justify-content-center p-3">
                        <div class="input-group form-outline form-white">
                            <i class="mi mi-Mail trailing text-muted"></i>
                            <input type="email" id="formWhite"
                            @bind-value="_RegisterModel.Email" class="form-control"
                                   aria-describedby="basic-addon" />
                            <label class="form-label text-muted" for="formWhite">Email Address</label>
                            <ValidationMessage For="@(()=>_RegisterModel.Email)" />
                        </div>
                    </section>

                    <section class="d-flex justify-content-center p-3">
                        <div class="input-group form-outline form-white">
                            <i class="mi mi-Search trailing text-muted"></i>
                            <input type="password" id="formWhite"
                            @bind-value="_RegisterModel.Password" class="form-control"
                                   aria-describedby="basic-addon" />
                            <label class="form-label text-muted" for="formWhite">Password</label>
                            <ValidationMessage For="@(()=>_RegisterModel.Password)" />
                        </div>
                    </section>

                    <section class="d-flex justify-content-center p-3">
                        <div class="container form-group mt-2">
                            <label class="text-muted">User Type</label>
                            <div>
                                @if (_UserType == null)
                                {
                                    <label>No Data Found.</label>
                                }

                                else
                                {
                                    <select class="form-control text-muted" @bind="_RegisterModel.TypeId"
                                            ValueExpression="@(()=> @_RegisterModel.TypeId)">
                                        <option value="0">-- User Type --</option>
                                        @foreach (var item in _UserType)
                                        {
                                            <option value="@item.Id">@item.Name</option>
                                        }
                                    </select>
                                    <ValidationMessage For="@(()=>_RegisterModel.TypeId)" />
                                }
                            </div>
                        </div>
                    </section>

                    <section class="d-flex justify-content-center p-3">
                        <div class="input-group form-outline form-white">
                            <i class="mi mi-Search trailing text-muted"></i>
                            <input type="text" id="formWhite"
                            @bind-value="_RegisterModel.FirstName" class="form-control"
                                   aria-describedby="basic-addon" />
                            <label class="form-label text-muted" for="formWhite">First Name</label>
                            <ValidationMessage For="@(()=>_RegisterModel.FirstName)" />
                        </div>
                    </section>

                    <section class="d-flex justify-content-center p-3">
                        <div class="input-group form-outline form-white">
                            <i class="mi mi-Search trailing text-muted"></i>
                            <input type="text" id="formWhite"
                            @bind-value="_RegisterModel.LastName" class="form-control"
                                   aria-describedby="basic-addon" />
                            <label class="form-label text-muted" for="formWhite">Last Name</label>
                            <ValidationMessage For="@(()=>_RegisterModel.LastName)" />
                        </div>
                    </section>

                    <section class="d-flex justify-content-center p-3">
                        <div class="input-group form-outline form-white">
                            <i class="mi mi-Search trailing text-muted"></i>
                            <input type="text" id="formWhite"
                            @bind-value="_RegisterModel.Name" class="form-control"
                                   aria-describedby="basic-addon" />
                            <label class="form-label text-muted" for="formWhite">Company Name</label>
                            <ValidationMessage For="@(()=>_RegisterModel.Name)" />
                        </div>
                    </section>

                    <section class="d-flex justify-content-center p-3">
                        <div class="container form-group">
                            <label class="form-label text-muted" for="formWhite">Size</label>
                            <div class="input-group form-outline form-white">
                                <i class="mi mi-Search trailing text-muted"></i>
                                <input type="text" id="formWhite"
                                @bind-value="_RegisterModel.Size" class="form-control"
                                       aria-describedby="basic-addon" />
                                <ValidationMessage For="@(()=>_RegisterModel.Size)" />
                            </div>
                        </div>
                    </section>

                    <section class="d-flex justify-content-center p-3">
                        <div class="container form-group mt-2">
                            <label class="text-muted">Category</label>
                            <div>
                                @if (_Industry == null)
                                {
                                    <label>No Data Found.</label>
                                }
                                else
                                {
                                    <select class="form-control text-muted" @bind="_RegisterModel.IndustryId"
                                            ValueExpression="@(()=> @_RegisterModel.IndustryId)">
                                        <option value="0">-- Category --</option>
                                        @foreach (var item in _Industry)
                                        {
                                            <option value="@item.Id">@item.Name</option>
                                        }
                                    </select>
                                    <ValidationMessage For="@(()=>_RegisterModel.IndustryId)" />
                                }
                            </div>
                        </div>
                    </section>

                    <section class="d-flex justify-content-center p-3">
                        <div class="input-group form-outline form-white">
                            <i class="mi mi-Search trailing text-muted"></i>
                            <input type="text" id="formWhite"
                            @bind-value="_RegisterModel.Number" class="form-control"
                                   aria-describedby="basic-addon" />
                            <label class="form-label text-muted" for="formWhite">Mobile Number</label>
                            <ValidationMessage For="@(()=>_RegisterModel.Number)" />
                        </div>
                    </section>

                    <section class="d-flex justify-content-center p-3">
                        <div class="input-group form-outline form-white">
                            <i class="mi mi-Search trailing text-muted"></i>
                            <input type="text" id="formWhite"
                            @bind-value="_RegisterModel.Address" class="form-control"
                                   aria-describedby="basic-addon" />
                            <label class="form-label text-muted" for="formWhite">Address</label>
                            <ValidationMessage For="@(()=>_RegisterModel.Address)" />
                        </div>
                    </section>

                    <div class="d-flex flex-row mt-2 justify-content-center align-items-center">
                        <div class="d-flex justify-content-center align-items-center">
                            <button type="submit" data-mdb-ripple-color="dark" class="btn btn-light mb-2 mx-2 mi-lg">
                                <i class="mi mi-MyNetwork"></i> Register
                                <span class="@_spinnerClass" role="status" aria-hidden="true"></span>
                            </button>
                        </div>
                    </div>

                </div>
            </EditForm>
        </div>
    </div>
    <!-- Tabs content-->
</section>

<div class="footer-space"></div>


@code {
    LoginModel _LoginModel = new();
    RegisterModel _RegisterModel = new();
    private string _spinnerClass = "";

    List<SettingsResponseModel> _UserType;
    List<SettingsResponseModel> _Industry;
    public string UserTypeId = "0b055410-9e2c-4dd8-a9f9-08db6683f67a";
    public string IndustryTypeId = "2767c68a-8da6-46cf-00ab-08db66b7e9a1";

    private List<IBrowserFile> loadedFiles = new();
    private long maxFileSize = 1024 * 15;
    private int maxAllowedFiles = 1;
    private bool isLoading;
    private string extensionname = "default";
    private bool isInfluencer = false;
    //InputFile Chnage event
    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        isLoading = true;
        loadedFiles.Clear();
        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            try
            {
                loadedFiles.Add(file);

                //get the upload file extension.
                extensionname = Path.GetExtension(file.Name);

                var imagefiletypes = new List<string>() {
                    ".png",".jpg",".jpeg"
                };
                if (imagefiletypes.Contains(extensionname))
                {

                    //resize the image and create the thumbnails
                    var resizedFile = await file.RequestImageFileAsync(file.ContentType, 640, 480); // resize the image file
                    var buf = new byte[resizedFile.Size]; // allocate a buffer to fill with the file's data
                    using (var stream = resizedFile.OpenReadStream())
                    {
                        await stream.ReadAsync(buf); // copy the stream to the buffer
                    }
                    _RegisterModel.ImagePath = "data:image/png;base64," + Convert.ToBase64String(buf); // convert to a base64 string!!
                }
            }
            catch (Exception ex)
            {
                await App.Current.MainPage.DisplayAlert("Oops", "Try again!", "OK");
            }
        }
        isLoading = false;
    }

    private async void register()
    {
        _spinnerClass = "spinner-border spinner-border-sm";
        var response = await LoginService.Create(_RegisterModel);
        //_LoginModel.UserName = _RegisterModel.Email;
        //_LoginModel.Password = _RegisterModel.Password;
        //_LoginModel.UserId = response.;
        //response = await LoginService.CreateLogin(_LoginModel);
        if (!string.IsNullOrWhiteSpace(response))
        {
            await App.Current.MainPage.DisplayAlert("Success", "Welcome!", "OK");
        }
        else
        {
            await App.Current.MainPage.DisplayAlert("Oops", "Try again!", "OK");
        }
        _spinnerClass = "";
        this.StateHasChanged();
    }

    private async void logIn()
    {
        _spinnerClass = "spinner-border spinner-border-sm";
        var response = await LoginService.AuthenticateUser(_LoginModel);
        if (response.IsSuccess)
        {
            var tokenResponse = JsonConvert.DeserializeObject<AuthenticateRequestAndResponse>(response.Content.ToString());

            var handler = new JwtSecurityTokenHandler();
            var jsontoken = handler.ReadToken(tokenResponse.AccessToken) as JwtSecurityToken;

            string _UserId           = jsontoken.Claims.FirstOrDefault(f => f.Type == "ui").Value;
            string _UserName         = jsontoken.Claims.FirstOrDefault(f => f.Type == JwtRegisteredClaimNames.Email).Value;
            string _Password         = jsontoken.Claims.FirstOrDefault(f => f.Type == "pw").Value;
            string _EmailVerified    = jsontoken.Claims.FirstOrDefault(f => f.Type == "ev").Value;
            string _PasswordVerified = jsontoken.Claims.FirstOrDefault(f => f.Type == "pv").Value;
            string _IsActive         = jsontoken.Claims.FirstOrDefault(f => f.Type == "ia").Value;
            string _RefreshToken     = "";
            //string _RefreshToken     = jsontoken.Claims.FirstOrDefault(f => f.Type == "rt").Value;
            string _TypeId           = jsontoken.Claims.FirstOrDefault(f => f.Type == "ti").Value;
            string _FirstName        = jsontoken.Claims.FirstOrDefault(f => f.Type == "fn").Value;
            string _LastName         = jsontoken.Claims.FirstOrDefault(f => f.Type == "ln").Value;
            string _Name             = jsontoken.Claims.FirstOrDefault(f => f.Type == "nm").Value;
            string _Number           = jsontoken.Claims.FirstOrDefault(f => f.Type == "nr").Value;
            string _ImagePath        = "";
            string _IndustryId       = jsontoken.Claims.FirstOrDefault(f => f.Type == "ii").Value;
            string _Size             = jsontoken.Claims.FirstOrDefault(f => f.Type == "sz").Value;
            string _InfluencerId     = jsontoken.Claims.FirstOrDefault(f => f.Type == "if").Value;
            string _UserTypeId         = jsontoken.Claims.FirstOrDefault(f => f.Type == "ut").Value;

            var _LoginSecureStorage = new LoginSecureStorage
                {

                    UserId = new Guid(_UserId),
                    UserName = _UserName,
                    Password = _Password,
                    EmailVerified = _EmailVerified == "true" ? true : false,
                    PasswordVerified = _EmailVerified == "true" ? true : false,
                    IsActive = _EmailVerified == "true" ? true : false,
                    TypeId = new Guid(_TypeId),
                    FirstName = _FirstName,
                    LastName = _LastName,
                    Name = _Name,
                    Number = _Number,
                    ImagePath = _ImagePath,
                    IndustryId = new Guid(_IndustryId),
                    Size = Convert.ToInt32(_Size),
                    InfluencerId = new Guid(_InfluencerId),
                    UserTypeId = new Guid(_UserTypeId),
                    AccessToken = tokenResponse.AccessToken,
                    RefreshToken = tokenResponse.RefreshToken
                };

            string userBasicInfoStr = JsonConvert.SerializeObject(_LoginSecureStorage);
            await SecureStorage.SetAsync(nameof(LoginSetting.LoginSecureStorage), userBasicInfoStr);
            LoginSetting.LoginSecureStorage = _LoginSecureStorage;

            String uti = "F6D62DCB-BD13-4002-8668-8F2544B65B87";
            if (LoginSetting.LoginSecureStorage.UserTypeId == new Guid(uti))
            {
                Navigation.NavigateTo("/collab");
                isInfluencer = true;
            }
            else
            {
                Navigation.NavigateTo("/");
                isInfluencer = false;
            }
        }
        else
        {
            await App.Current.MainPage.DisplayAlert("Oops", "Invalid username or password!", "OK");
        }
        _spinnerClass = "";
        this.StateHasChanged();
    }


    protected override async Task OnInitializedAsync()
    {
        _UserType = await AppService.FilterBy(UserTypeId);
        _Industry = await AppService.FilterBy(IndustryTypeId);
        //string userDetailsStr = await SecureStorage.GetAsync(nameof(LoginSetting.LoginSecureStorage));

        //if (!string.IsNullOrWhiteSpace(userDetailsStr))
        //{
        //    var userBasicDetail = JsonConvert.DeserializeObject<LoginSecureStorage>(userDetailsStr);

        //    var handler = new JwtSecurityTokenHandler();
        //    var jsontoken = handler.ReadToken(userBasicDetail.AccessToken) as JwtSecurityToken;
        //    LoginSetting.LoginSecureStorage = userBasicDetail;

        //    if (jsontoken.ValidTo >= DateTime.UtcNow)
        //    {
        //        Navigation.NavigateTo("/Register");
        //    }
        //}
    }
}